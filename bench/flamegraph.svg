<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>bench`__rdl_dealloc (5 samples, 0.29%)</title><rect x="0.0000%" y="213" width="0.2872%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="223.50"></text></g><g><title>bench`__rust_dealloc (3 samples, 0.17%)</title><rect x="0.2872%" y="213" width="0.1723%" height="15" fill="rgb(217,0,24)"/><text x="0.5372%" y="223.50"></text></g><g><title>bench`bench::bench_generated::benchfb::FooBar::create (3 samples, 0.17%)</title><rect x="0.4595%" y="213" width="0.1723%" height="15" fill="rgb(221,193,54)"/><text x="0.7095%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (62 samples, 3.56%)</title><rect x="2.5847%" y="181" width="3.5612%" height="15" fill="rgb(248,212,6)"/><text x="2.8347%" y="191.50">libs..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (60 samples, 3.45%)</title><rect x="2.6996%" y="165" width="3.4463%" height="15" fill="rgb(208,68,35)"/><text x="2.9496%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (56 samples, 3.22%)</title><rect x="2.9294%" y="149" width="3.2165%" height="15" fill="rgb(232,128,0)"/><text x="3.1794%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (18 samples, 1.03%)</title><rect x="5.1120%" y="133" width="1.0339%" height="15" fill="rgb(207,160,47)"/><text x="5.3620%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.34%)</title><rect x="5.8013%" y="117" width="0.3446%" height="15" fill="rgb(228,23,34)"/><text x="6.0513%" y="127.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (67 samples, 3.85%)</title><rect x="2.4124%" y="197" width="3.8484%" height="15" fill="rgb(218,30,26)"/><text x="2.6624%" y="207.50">benc..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.11%)</title><rect x="6.1459%" y="181" width="0.1149%" height="15" fill="rgb(220,122,19)"/><text x="6.3959%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (9 samples, 0.52%)</title><rect x="12.5790%" y="117" width="0.5169%" height="15" fill="rgb(250,228,42)"/><text x="12.8290%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (58 samples, 3.33%)</title><rect x="10.5686%" y="165" width="3.3314%" height="15" fill="rgb(240,193,28)"/><text x="10.8186%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (54 samples, 3.10%)</title><rect x="10.7984%" y="149" width="3.1017%" height="15" fill="rgb(216,20,37)"/><text x="11.0484%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (54 samples, 3.10%)</title><rect x="10.7984%" y="133" width="3.1017%" height="15" fill="rgb(206,188,39)"/><text x="11.0484%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (14 samples, 0.80%)</title><rect x="13.0959%" y="117" width="0.8041%" height="15" fill="rgb(217,207,13)"/><text x="13.3459%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.17%)</title><rect x="13.7277%" y="101" width="0.1723%" height="15" fill="rgb(231,73,38)"/><text x="13.9777%" y="111.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (66 samples, 3.79%)</title><rect x="10.1666%" y="181" width="3.7909%" height="15" fill="rgb(225,20,46)"/><text x="10.4166%" y="191.50">benc..</text></g><g><title>bench`__rdl_realloc (3 samples, 0.17%)</title><rect x="17.6335%" y="149" width="0.1723%" height="15" fill="rgb(210,31,41)"/><text x="17.8835%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (12 samples, 0.69%)</title><rect x="19.5864%" y="101" width="0.6893%" height="15" fill="rgb(221,200,47)"/><text x="19.8364%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (10 samples, 0.57%)</title><rect x="20.2757%" y="101" width="0.5744%" height="15" fill="rgb(226,26,5)"/><text x="20.5257%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.11%)</title><rect x="22.4009%" y="69" width="0.1149%" height="15" fill="rgb(249,33,26)"/><text x="22.6509%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (37 samples, 2.13%)</title><rect x="20.8501%" y="101" width="2.1252%" height="15" fill="rgb(235,183,28)"/><text x="21.1001%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (36 samples, 2.07%)</title><rect x="20.9075%" y="85" width="2.0678%" height="15" fill="rgb(221,5,38)"/><text x="21.1575%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.46%)</title><rect x="22.5158%" y="69" width="0.4595%" height="15" fill="rgb(247,18,42)"/><text x="22.7658%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.17%)</title><rect x="22.8030%" y="53" width="0.1723%" height="15" fill="rgb(241,131,45)"/><text x="23.0530%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (14 samples, 0.80%)</title><rect x="22.9753%" y="101" width="0.8041%" height="15" fill="rgb(249,31,29)"/><text x="23.2253%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (13 samples, 0.75%)</title><rect x="23.0327%" y="85" width="0.7467%" height="15" fill="rgb(225,111,53)"/><text x="23.2827%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.34%)</title><rect x="27.5704%" y="85" width="0.3446%" height="15" fill="rgb(238,160,17)"/><text x="27.8204%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (84 samples, 4.82%)</title><rect x="23.7794%" y="101" width="4.8248%" height="15" fill="rgb(214,148,48)"/><text x="24.0294%" y="111.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (12 samples, 0.69%)</title><rect x="27.9150%" y="85" width="0.6893%" height="15" fill="rgb(232,36,49)"/><text x="28.1650%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (173 samples, 9.94%)</title><rect x="19.0121%" y="117" width="9.9368%" height="15" fill="rgb(209,103,24)"/><text x="19.2621%" y="127.50">libsystem_mall..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.34%)</title><rect x="28.6043%" y="101" width="0.3446%" height="15" fill="rgb(229,88,8)"/><text x="28.8543%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (189 samples, 10.86%)</title><rect x="18.3228%" y="133" width="10.8558%" height="15" fill="rgb(213,181,19)"/><text x="18.5728%" y="143.50">libsystem_malloc..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.11%)</title><rect x="29.0638%" y="117" width="0.1149%" height="15" fill="rgb(254,191,54)"/><text x="29.3138%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (15 samples, 0.86%)</title><rect x="29.1786%" y="133" width="0.8616%" height="15" fill="rgb(241,83,37)"/><text x="29.4286%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (14 samples, 0.80%)</title><rect x="29.2361%" y="117" width="0.8041%" height="15" fill="rgb(233,36,39)"/><text x="29.4861%" y="127.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (227 samples, 13.04%)</title><rect x="17.0592%" y="165" width="13.0385%" height="15" fill="rgb(226,3,54)"/><text x="17.3092%" y="175.50">bench`alloc::raw_vec..</text></g><g><title>libsystem_malloc.dylib`realloc (214 samples, 12.29%)</title><rect x="17.8059%" y="149" width="12.2918%" height="15" fill="rgb(245,192,40)"/><text x="18.0559%" y="159.50">libsystem_malloc.d..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (15 samples, 0.86%)</title><rect x="30.1551%" y="165" width="0.8616%" height="15" fill="rgb(238,167,29)"/><text x="30.4051%" y="175.50"></text></g><g><title>bench`flatbuffers::builder::FlatBufferBuilder::make_space (300 samples, 17.23%)</title><rect x="13.9575%" y="181" width="17.2315%" height="15" fill="rgb(232,182,51)"/><text x="14.2075%" y="191.50">bench`flatbuffers::builder:..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.17%)</title><rect x="31.0167%" y="165" width="0.1723%" height="15" fill="rgb(231,60,39)"/><text x="31.2667%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (2 samples, 0.11%)</title><rect x="33.0270%" y="101" width="0.1149%" height="15" fill="rgb(208,69,12)"/><text x="33.2770%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.75%)</title><rect x="33.4865%" y="85" width="0.7467%" height="15" fill="rgb(235,93,37)"/><text x="33.7365%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.29%)</title><rect x="33.9460%" y="69" width="0.2872%" height="15" fill="rgb(213,116,39)"/><text x="34.1960%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.11%)</title><rect x="34.1183%" y="53" width="0.1149%" height="15" fill="rgb(222,207,29)"/><text x="34.3683%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (5 samples, 0.29%)</title><rect x="34.2332%" y="85" width="0.2872%" height="15" fill="rgb(206,96,30)"/><text x="34.4832%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.57%)</title><rect x="34.5204%" y="85" width="0.5744%" height="15" fill="rgb(218,138,4)"/><text x="34.7704%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.52%)</title><rect x="34.5778%" y="69" width="0.5169%" height="15" fill="rgb(250,191,14)"/><text x="34.8278%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.34%)</title><rect x="34.7501%" y="53" width="0.3446%" height="15" fill="rgb(239,60,40)"/><text x="35.0001%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.17%)</title><rect x="34.9225%" y="37" width="0.1723%" height="15" fill="rgb(206,27,48)"/><text x="35.1725%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (14 samples, 0.80%)</title><rect x="35.0948%" y="85" width="0.8041%" height="15" fill="rgb(225,35,8)"/><text x="35.3448%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 0.57%)</title><rect x="35.3245%" y="69" width="0.5744%" height="15" fill="rgb(250,213,24)"/><text x="35.5745%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.17%)</title><rect x="37.0477%" y="69" width="0.1723%" height="15" fill="rgb(247,123,22)"/><text x="37.2977%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (85 samples, 4.88%)</title><rect x="32.7972%" y="117" width="4.8823%" height="15" fill="rgb(231,138,38)"/><text x="33.0472%" y="127.50">libsys..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (78 samples, 4.48%)</title><rect x="33.1993%" y="101" width="4.4802%" height="15" fill="rgb(231,145,46)"/><text x="33.4493%" y="111.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (30 samples, 1.72%)</title><rect x="35.9563%" y="85" width="1.7231%" height="15" fill="rgb(251,118,11)"/><text x="36.2063%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (8 samples, 0.46%)</title><rect x="37.2200%" y="69" width="0.4595%" height="15" fill="rgb(217,147,25)"/><text x="37.4700%" y="79.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (101 samples, 5.80%)</title><rect x="32.3952%" y="149" width="5.8013%" height="15" fill="rgb(247,81,37)"/><text x="32.6452%" y="159.50">bench`a..</text></g><g><title>libsystem_malloc.dylib`realloc (99 samples, 5.69%)</title><rect x="32.5101%" y="133" width="5.6864%" height="15" fill="rgb(209,12,38)"/><text x="32.7601%" y="143.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`szone_size (9 samples, 0.52%)</title><rect x="37.6795%" y="117" width="0.5169%" height="15" fill="rgb(227,1,9)"/><text x="37.9295%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.40%)</title><rect x="37.7944%" y="101" width="0.4021%" height="15" fill="rgb(248,47,43)"/><text x="38.0444%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (6 samples, 0.34%)</title><rect x="38.2539%" y="149" width="0.3446%" height="15" fill="rgb(221,10,30)"/><text x="38.5039%" y="159.50"></text></g><g><title>bench`flatbuffers::builder::FlatBufferBuilder::make_space (121 samples, 6.95%)</title><rect x="31.7059%" y="165" width="6.9500%" height="15" fill="rgb(210,229,1)"/><text x="31.9559%" y="175.50">bench`fla..</text></g><g><title>bench`flatbuffers::builder::FlatBufferBuilder::push_slot_always (133 samples, 7.64%)</title><rect x="31.1890%" y="181" width="7.6393%" height="15" fill="rgb(222,148,37)"/><text x="31.4390%" y="191.50">bench`flat..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.17%)</title><rect x="38.6559%" y="165" width="0.1723%" height="15" fill="rgb(234,67,33)"/><text x="38.9059%" y="175.50"></text></g><g><title>bench`&lt;flatbuffers::vtable::VTable as core::cmp::PartialEq&gt;::eq (15 samples, 0.86%)</title><rect x="42.3320%" y="165" width="0.8616%" height="15" fill="rgb(247,98,35)"/><text x="42.5820%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (9 samples, 0.52%)</title><rect x="42.6766%" y="149" width="0.5169%" height="15" fill="rgb(247,138,52)"/><text x="42.9266%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (63 samples, 3.62%)</title><rect x="43.7105%" y="149" width="3.6186%" height="15" fill="rgb(213,79,30)"/><text x="43.9605%" y="159.50">libs..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (61 samples, 3.50%)</title><rect x="43.8254%" y="133" width="3.5037%" height="15" fill="rgb(246,177,23)"/><text x="44.0754%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (59 samples, 3.39%)</title><rect x="43.9403%" y="117" width="3.3889%" height="15" fill="rgb(230,62,27)"/><text x="44.1903%" y="127.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (23 samples, 1.32%)</title><rect x="46.0080%" y="101" width="1.3211%" height="15" fill="rgb(216,154,8)"/><text x="46.2580%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.40%)</title><rect x="46.9271%" y="85" width="0.4021%" height="15" fill="rgb(244,35,45)"/><text x="47.1771%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.23%)</title><rect x="47.3291%" y="149" width="0.2298%" height="15" fill="rgb(251,115,12)"/><text x="47.5791%" y="159.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (74 samples, 4.25%)</title><rect x="43.3659%" y="165" width="4.2504%" height="15" fill="rgb(240,54,50)"/><text x="43.6159%" y="175.50">bench..</text></g><g><title>bench`__rdl_realloc (2 samples, 0.11%)</title><rect x="48.9374%" y="149" width="0.1149%" height="15" fill="rgb(233,84,52)"/><text x="49.1874%" y="159.50"></text></g><g><title>bench`__rdl_realloc (2 samples, 0.11%)</title><rect x="49.1097%" y="133" width="0.1149%" height="15" fill="rgb(207,117,47)"/><text x="49.3597%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (2 samples, 0.11%)</title><rect x="49.5118%" y="117" width="0.1149%" height="15" fill="rgb(249,43,39)"/><text x="49.7618%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (2 samples, 0.11%)</title><rect x="50.2010%" y="101" width="0.1149%" height="15" fill="rgb(209,38,44)"/><text x="50.4510%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.57%)</title><rect x="50.7180%" y="85" width="0.5744%" height="15" fill="rgb(236,212,23)"/><text x="50.9680%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.34%)</title><rect x="50.9477%" y="69" width="0.3446%" height="15" fill="rgb(242,79,21)"/><text x="51.1977%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.23%)</title><rect x="51.0626%" y="53" width="0.2298%" height="15" fill="rgb(211,96,35)"/><text x="51.3126%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (5 samples, 0.29%)</title><rect x="51.2924%" y="85" width="0.2872%" height="15" fill="rgb(253,215,40)"/><text x="51.5424%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.98%)</title><rect x="51.5796%" y="85" width="0.9765%" height="15" fill="rgb(211,81,21)"/><text x="51.8296%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.92%)</title><rect x="51.6370%" y="69" width="0.9190%" height="15" fill="rgb(208,190,38)"/><text x="51.8870%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.52%)</title><rect x="52.0391%" y="53" width="0.5169%" height="15" fill="rgb(235,213,38)"/><text x="52.2891%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.63%)</title><rect x="52.5560%" y="85" width="0.6318%" height="15" fill="rgb(237,122,38)"/><text x="52.8060%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.40%)</title><rect x="52.7858%" y="69" width="0.4021%" height="15" fill="rgb(244,218,35)"/><text x="53.0358%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.46%)</title><rect x="54.9684%" y="69" width="0.4595%" height="15" fill="rgb(240,68,47)"/><text x="55.2184%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (108 samples, 6.20%)</title><rect x="49.6267%" y="117" width="6.2033%" height="15" fill="rgb(210,16,53)"/><text x="49.8767%" y="127.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (96 samples, 5.51%)</title><rect x="50.3159%" y="101" width="5.5141%" height="15" fill="rgb(235,124,12)"/><text x="50.5659%" y="111.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (45 samples, 2.58%)</title><rect x="53.2453%" y="85" width="2.5847%" height="15" fill="rgb(224,169,11)"/><text x="53.4953%" y="95.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.40%)</title><rect x="55.4279%" y="69" width="0.4021%" height="15" fill="rgb(250,166,2)"/><text x="55.6779%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (9 samples, 0.52%)</title><rect x="55.8300%" y="117" width="0.5169%" height="15" fill="rgb(242,216,29)"/><text x="56.0800%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.40%)</title><rect x="55.9449%" y="101" width="0.4021%" height="15" fill="rgb(230,116,27)"/><text x="56.1949%" y="111.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (128 samples, 7.35%)</title><rect x="49.0523%" y="149" width="7.3521%" height="15" fill="rgb(228,99,48)"/><text x="49.3023%" y="159.50">bench`allo..</text></g><g><title>libsystem_malloc.dylib`realloc (125 samples, 7.18%)</title><rect x="49.2246%" y="133" width="7.1798%" height="15" fill="rgb(253,11,6)"/><text x="49.4746%" y="143.50">libsystem_..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (9 samples, 0.52%)</title><rect x="56.4044%" y="149" width="0.5169%" height="15" fill="rgb(247,143,39)"/><text x="56.6544%" y="159.50"></text></g><g><title>bench`flatbuffers::builder::FlatBufferBuilder::make_space (176 samples, 10.11%)</title><rect x="47.6163%" y="165" width="10.1091%" height="15" fill="rgb(236,97,10)"/><text x="47.8663%" y="175.50">bench`flatbuffe..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (14 samples, 0.80%)</title><rect x="56.9213%" y="149" width="0.8041%" height="15" fill="rgb(233,208,19)"/><text x="57.1713%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2 samples, 0.11%)</title><rect x="57.7254%" y="165" width="0.1149%" height="15" fill="rgb(216,164,2)"/><text x="57.9754%" y="175.50"></text></g><g><title>bench`flatbuffers::builder::FlatBufferBuilder::write_vtable (332 samples, 19.07%)</title><rect x="38.8283%" y="181" width="19.0695%" height="15" fill="rgb(220,129,5)"/><text x="39.0783%" y="191.50">bench`flatbuffers::builder::Fl..</text></g><g><title>bench`bench::bench_generated::benchfb::FooBar::create (901 samples, 51.75%)</title><rect x="6.2608%" y="197" width="51.7519%" height="15" fill="rgb(242,17,10)"/><text x="6.5108%" y="207.50">bench`bench::bench_generated::benchfb::FooBar::create</text></g><g><title>bench`flatbuffers::builder::FlatBufferBuilder::make_space (15 samples, 0.86%)</title><rect x="58.5870%" y="181" width="0.8616%" height="15" fill="rgb(242,107,0)"/><text x="58.8370%" y="191.50"></text></g><g><title>bench`flatbuffers::builder::FlatBufferBuilder::push_slot_always (6 samples, 0.34%)</title><rect x="59.4486%" y="181" width="0.3446%" height="15" fill="rgb(251,28,31)"/><text x="59.6986%" y="191.50"></text></g><g><title>bench`flatbuffers::builder::FlatBufferBuilder::make_space (2 samples, 0.11%)</title><rect x="59.6783%" y="165" width="0.1149%" height="15" fill="rgb(233,223,10)"/><text x="59.9283%" y="175.50"></text></g><g><title>bench`&lt;flatbuffers::vtable::VTable as core::cmp::PartialEq&gt;::eq (12 samples, 0.69%)</title><rect x="61.2292%" y="165" width="0.6893%" height="15" fill="rgb(215,21,27)"/><text x="61.4792%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (6 samples, 0.34%)</title><rect x="61.5738%" y="149" width="0.3446%" height="15" fill="rgb(232,23,21)"/><text x="61.8238%" y="159.50"></text></g><g><title>bench`bench::bench_generated::benchfb::FooBarContainer::create (73 samples, 4.19%)</title><rect x="58.0126%" y="197" width="4.1930%" height="15" fill="rgb(244,5,23)"/><text x="58.2626%" y="207.50">bench..</text></g><g><title>bench`flatbuffers::builder::FlatBufferBuilder::write_vtable (42 samples, 2.41%)</title><rect x="59.7932%" y="181" width="2.4124%" height="15" fill="rgb(226,81,46)"/><text x="60.0432%" y="191.50">be..</text></g><g><title>bench`flatbuffers::builder::FlatBufferBuilder::make_space (5 samples, 0.29%)</title><rect x="61.9184%" y="165" width="0.2872%" height="15" fill="rgb(247,70,30)"/><text x="62.1684%" y="175.50"></text></g><g><title>bench`DYLD-STUB$$__bzero (2 samples, 0.11%)</title><rect x="64.9627%" y="181" width="0.1149%" height="15" fill="rgb(212,68,19)"/><text x="65.2127%" y="191.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.23%)</title><rect x="65.0775%" y="181" width="0.2298%" height="15" fill="rgb(240,187,13)"/><text x="65.3275%" y="191.50"></text></g><g><title>bench`__rdl_realloc (3 samples, 0.17%)</title><rect x="69.7875%" y="149" width="0.1723%" height="15" fill="rgb(223,113,26)"/><text x="70.0375%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (36 samples, 2.07%)</title><rect x="69.9598%" y="149" width="2.0678%" height="15" fill="rgb(206,192,2)"/><text x="70.2098%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 1.90%)</title><rect x="70.1321%" y="133" width="1.8955%" height="15" fill="rgb(241,108,4)"/><text x="70.3821%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (29 samples, 1.67%)</title><rect x="70.3619%" y="117" width="1.6657%" height="15" fill="rgb(247,173,49)"/><text x="70.6119%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (2 samples, 0.11%)</title><rect x="72.7743%" y="133" width="0.1149%" height="15" fill="rgb(224,114,35)"/><text x="73.0243%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (3 samples, 0.17%)</title><rect x="73.1189%" y="117" width="0.1723%" height="15" fill="rgb(245,159,27)"/><text x="73.3689%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (3 samples, 0.17%)</title><rect x="73.2912%" y="117" width="0.1723%" height="15" fill="rgb(245,172,44)"/><text x="73.5412%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.34%)</title><rect x="74.0953%" y="101" width="0.3446%" height="15" fill="rgb(236,23,11)"/><text x="74.3453%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.34%)</title><rect x="74.4400%" y="101" width="0.3446%" height="15" fill="rgb(205,117,38)"/><text x="74.6900%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.80%)</title><rect x="74.7846%" y="101" width="0.8041%" height="15" fill="rgb(237,72,25)"/><text x="75.0346%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.80%)</title><rect x="74.7846%" y="85" width="0.8041%" height="15" fill="rgb(244,70,9)"/><text x="75.0346%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.17%)</title><rect x="75.4164%" y="69" width="0.1723%" height="15" fill="rgb(217,125,39)"/><text x="75.6664%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (16 samples, 0.92%)</title><rect x="75.5887%" y="101" width="0.9190%" height="15" fill="rgb(235,36,10)"/><text x="75.8387%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (15 samples, 0.86%)</title><rect x="75.6462%" y="85" width="0.8616%" height="15" fill="rgb(251,123,47)"/><text x="75.8962%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.11%)</title><rect x="76.6226%" y="101" width="0.1149%" height="15" fill="rgb(221,13,13)"/><text x="76.8726%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (10 samples, 0.57%)</title><rect x="77.9437%" y="85" width="0.5744%" height="15" fill="rgb(238,131,9)"/><text x="78.1937%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (104 samples, 5.97%)</title><rect x="72.8891%" y="133" width="5.9736%" height="15" fill="rgb(211,50,8)"/><text x="73.1391%" y="143.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (93 samples, 5.34%)</title><rect x="73.5210%" y="117" width="5.3418%" height="15" fill="rgb(245,182,24)"/><text x="73.7710%" y="127.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (37 samples, 2.13%)</title><rect x="76.7375%" y="101" width="2.1252%" height="15" fill="rgb(242,14,37)"/><text x="76.9875%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.34%)</title><rect x="78.5181%" y="85" width="0.3446%" height="15" fill="rgb(246,228,12)"/><text x="78.7681%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`realloc (132 samples, 7.58%)</title><rect x="72.0850%" y="149" width="7.5818%" height="15" fill="rgb(213,55,15)"/><text x="72.3350%" y="159.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.75%)</title><rect x="78.9202%" y="133" width="0.7467%" height="15" fill="rgb(209,9,3)"/><text x="79.1702%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (12 samples, 0.69%)</title><rect x="78.9776%" y="117" width="0.6893%" height="15" fill="rgb(230,59,30)"/><text x="79.2276%" y="127.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (186 samples, 10.68%)</title><rect x="69.0982%" y="165" width="10.6835%" height="15" fill="rgb(209,121,21)"/><text x="69.3482%" y="175.50">bench`alloc::raw..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (10 samples, 0.57%)</title><rect x="79.8392%" y="165" width="0.5744%" height="15" fill="rgb(220,109,13)"/><text x="80.0892%" y="175.50"></text></g><g><title>bench`flatbuffers::builder::FlatBufferBuilder::make_space (273 samples, 15.68%)</title><rect x="65.3073%" y="181" width="15.6806%" height="15" fill="rgb(232,18,1)"/><text x="65.5573%" y="191.50">bench`flatbuffers::build..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (10 samples, 0.57%)</title><rect x="80.4136%" y="165" width="0.5744%" height="15" fill="rgb(215,41,42)"/><text x="80.6636%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (5 samples, 0.29%)</title><rect x="80.9879%" y="181" width="0.2872%" height="15" fill="rgb(224,123,36)"/><text x="81.2379%" y="191.50"></text></g><g><title>bench`flatbuffers::builder::FlatBufferBuilder::create_string (340 samples, 19.53%)</title><rect x="62.2056%" y="197" width="19.5290%" height="15" fill="rgb(240,125,3)"/><text x="62.4556%" y="207.50">bench`flatbuffers::builder::Fla..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (8 samples, 0.46%)</title><rect x="81.2751%" y="181" width="0.4595%" height="15" fill="rgb(205,98,50)"/><text x="81.5251%" y="191.50"></text></g><g><title>bench`flatbuffers::builder::FlatBufferBuilder::finish_with_opts (8 samples, 0.46%)</title><rect x="81.7346%" y="197" width="0.4595%" height="15" fill="rgb(205,185,37)"/><text x="81.9846%" y="207.50"></text></g><g><title>bench`flatbuffers::builder::FlatBufferBuilder::make_space (3 samples, 0.17%)</title><rect x="82.0218%" y="181" width="0.1723%" height="15" fill="rgb(238,207,15)"/><text x="82.2718%" y="191.50"></text></g><g><title>bench`flatbuffers::builder::FlatBufferBuilder::make_space (36 samples, 2.07%)</title><rect x="82.1941%" y="197" width="2.0678%" height="15" fill="rgb(213,199,42)"/><text x="82.4441%" y="207.50">b..</text></g><g><title>bench`flatbuffers::builder::FlatBufferBuilder::write_vtable (2 samples, 0.11%)</title><rect x="84.3194%" y="197" width="0.1149%" height="15" fill="rgb(235,201,11)"/><text x="84.5694%" y="207.50"></text></g><g><title>bench`no_proto::NP_Factory::new (2 samples, 0.11%)</title><rect x="84.4342%" y="197" width="0.1149%" height="15" fill="rgb(207,46,11)"/><text x="84.6842%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (42 samples, 2.41%)</title><rect x="85.1809%" y="181" width="2.4124%" height="15" fill="rgb(241,35,35)"/><text x="85.4309%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_size (39 samples, 2.24%)</title><rect x="85.3532%" y="165" width="2.2401%" height="15" fill="rgb(243,32,47)"/><text x="85.6032%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`free (57 samples, 3.27%)</title><rect x="84.5491%" y="197" width="3.2740%" height="15" fill="rgb(247,202,23)"/><text x="84.7991%" y="207.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.23%)</title><rect x="87.5933%" y="181" width="0.2298%" height="15" fill="rgb(219,102,11)"/><text x="87.8433%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (38 samples, 2.18%)</title><rect x="95.2901%" y="165" width="2.1827%" height="15" fill="rgb(243,110,44)"/><text x="95.5401%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`free_tiny (195 samples, 11.20%)</title><rect x="87.8231%" y="197" width="11.2005%" height="15" fill="rgb(222,74,54)"/><text x="88.0731%" y="207.50">libsystem_malloc..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (130 samples, 7.47%)</title><rect x="91.5566%" y="181" width="7.4670%" height="15" fill="rgb(216,99,12)"/><text x="91.8066%" y="191.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (27 samples, 1.55%)</title><rect x="97.4727%" y="165" width="1.5508%" height="15" fill="rgb(226,22,26)"/><text x="97.7227%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.11%)</title><rect x="99.0810%" y="197" width="0.1149%" height="15" fill="rgb(217,163,10)"/><text x="99.3310%" y="207.50"></text></g><g><title>bench`bench::main (1,717 samples, 98.62%)</title><rect x="0.6318%" y="213" width="98.6215%" height="15" fill="rgb(213,25,53)"/><text x="0.8818%" y="223.50">bench`bench::main</text></g><g><title>bench`flatbuffers::builder::FlatBufferBuilder::create_string (3 samples, 0.17%)</title><rect x="99.2533%" y="213" width="0.1723%" height="15" fill="rgb(252,105,26)"/><text x="99.5033%" y="223.50"></text></g><g><title>bench`flatbuffers::builder::FlatBufferBuilder::make_space (3 samples, 0.17%)</title><rect x="99.4256%" y="213" width="0.1723%" height="15" fill="rgb(220,39,43)"/><text x="99.6756%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.17%)</title><rect x="99.5979%" y="213" width="0.1723%" height="15" fill="rgb(229,68,48)"/><text x="99.8479%" y="223.50"></text></g><g><title>all (1,741 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="335.50"></text></g><g><title>bench`0x1 (1,741 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="319.50">bench`0x1</text></g><g><title>libdyld.dylib`start (1,741 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="303.50">libdyld.dylib`start</text></g><g><title>bench`main (1,741 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="287.50">bench`main</text></g><g><title>bench`std::rt::lang_start_internal (1,741 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="271.50">bench`std::rt::lang_start_internal</text></g><g><title>bench`std::rt::lang_start::_{{closure}} (1,741 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="255.50">bench`std::rt::lang_start::_{{closure}}</text></g><g><title>bench`std::sys_common::backtrace::__rust_begin_short_backtrace (1,741 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="239.50">bench`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.17%)</title><rect x="99.8277%" y="213" width="0.1723%" height="15" fill="rgb(221,78,26)"/><text x="100.0777%" y="223.50"></text></g></svg></svg>