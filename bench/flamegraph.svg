<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>bench`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (14 samples, 0.16%)</title><rect x="2.3870%" y="117" width="0.1607%" height="15" fill="rgb(227,0,7)"/><text x="2.6370%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (117 samples, 1.34%)</title><rect x="3.1558%" y="53" width="1.3427%" height="15" fill="rgb(217,0,24)"/><text x="3.4058%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (109 samples, 1.25%)</title><rect x="3.2476%" y="37" width="1.2509%" height="15" fill="rgb(221,193,54)"/><text x="3.4976%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (131 samples, 1.50%)</title><rect x="3.0067%" y="69" width="1.5033%" height="15" fill="rgb(248,212,6)"/><text x="3.2567%" y="79.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (147 samples, 1.69%)</title><rect x="2.8689%" y="85" width="1.6869%" height="15" fill="rgb(208,68,35)"/><text x="3.1189%" y="95.50"></text></g><g><title>bench`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (166 samples, 1.90%)</title><rect x="2.7312%" y="101" width="1.9050%" height="15" fill="rgb(232,128,0)"/><text x="2.9812%" y="111.50">b..</text></g><g><title>bench`core::fmt::write (239 samples, 2.74%)</title><rect x="2.0427%" y="133" width="2.7427%" height="15" fill="rgb(207,160,47)"/><text x="2.2927%" y="143.50">be..</text></g><g><title>bench`core::fmt::num::imp::_&lt;impl core::fmt::Display for i32&gt;::fmt (187 samples, 2.15%)</title><rect x="2.6394%" y="117" width="2.1460%" height="15" fill="rgb(228,23,34)"/><text x="2.8894%" y="127.50">b..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (36 samples, 0.41%)</title><rect x="5.2903%" y="69" width="0.4131%" height="15" fill="rgb(218,30,26)"/><text x="5.5403%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (79 samples, 0.91%)</title><rect x="5.1297%" y="101" width="0.9066%" height="15" fill="rgb(220,122,19)"/><text x="5.3797%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (71 samples, 0.81%)</title><rect x="5.2215%" y="85" width="0.8148%" height="15" fill="rgb(250,228,42)"/><text x="5.4715%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (29 samples, 0.33%)</title><rect x="5.7035%" y="69" width="0.3328%" height="15" fill="rgb(240,193,28)"/><text x="5.9535%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.15%)</title><rect x="6.0592%" y="101" width="0.1492%" height="15" fill="rgb(216,20,37)"/><text x="6.3092%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.15%)</title><rect x="6.2084%" y="101" width="0.1492%" height="15" fill="rgb(206,188,39)"/><text x="6.4584%" y="111.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::new (122 samples, 1.40%)</title><rect x="4.9690%" y="117" width="1.4000%" height="15" fill="rgb(217,207,13)"/><text x="5.2190%" y="127.50"></text></g><g><title>bench`no_proto::NP_Factory::empty_buffer (145 samples, 1.66%)</title><rect x="4.7854%" y="133" width="1.6640%" height="15" fill="rgb(231,73,38)"/><text x="5.0354%" y="143.50"></text></g><g><title>bench`no_proto::buffer::NP_Buffer::cursor_to_root (53 samples, 0.61%)</title><rect x="6.4494%" y="133" width="0.6082%" height="15" fill="rgb(225,20,46)"/><text x="6.6994%" y="143.50"></text></g><g><title>bench`no_proto::pointer::NP_Cursor::new (15 samples, 0.17%)</title><rect x="6.8855%" y="117" width="0.1721%" height="15" fill="rgb(210,31,41)"/><text x="7.1355%" y="127.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.16%)</title><rect x="26.3140%" y="117" width="0.1607%" height="15" fill="rgb(221,200,47)"/><text x="26.5640%" y="127.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::addr_size_bytes (16 samples, 0.18%)</title><rect x="26.4746%" y="117" width="0.1836%" height="15" fill="rgb(226,26,5)"/><text x="26.7246%" y="127.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_borrow (85 samples, 0.98%)</title><rect x="26.6697%" y="117" width="0.9754%" height="15" fill="rgb(249,33,26)"/><text x="26.9197%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (30 samples, 0.34%)</title><rect x="27.3009%" y="101" width="0.3443%" height="15" fill="rgb(235,183,28)"/><text x="27.5509%" y="111.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_cursor (224 samples, 2.57%)</title><rect x="27.6452%" y="117" width="2.5706%" height="15" fill="rgb(221,5,38)"/><text x="27.8952%" y="127.50">be..</text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (31 samples, 0.36%)</title><rect x="29.8600%" y="101" width="0.3557%" height="15" fill="rgb(247,18,42)"/><text x="30.1100%" y="111.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::read_address (102 samples, 1.17%)</title><rect x="30.2157%" y="117" width="1.1705%" height="15" fill="rgb(241,131,45)"/><text x="30.4657%" y="127.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::read_bytes (9 samples, 0.10%)</title><rect x="31.3863%" y="117" width="0.1033%" height="15" fill="rgb(249,31,29)"/><text x="31.6363%" y="127.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::write_address (128 samples, 1.47%)</title><rect x="31.4896%" y="117" width="1.4689%" height="15" fill="rgb(225,111,53)"/><text x="31.7396%" y="127.50"></text></g><g><title>bench`no_proto::pointer::NP_Cursor::new (335 samples, 3.84%)</title><rect x="32.9585%" y="117" width="3.8444%" height="15" fill="rgb(238,160,17)"/><text x="33.2085%" y="127.50">benc..</text></g><g><title>bench`no_proto::memory::NP_Memory::read_address (73 samples, 0.84%)</title><rect x="35.9651%" y="101" width="0.8377%" height="15" fill="rgb(214,148,48)"/><text x="36.2151%" y="111.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_borrow (13 samples, 0.15%)</title><rect x="36.9406%" y="101" width="0.1492%" height="15" fill="rgb(232,36,49)"/><text x="37.1906%" y="111.50"></text></g><g><title>bench`no_proto::pointer::bool::_&lt;impl no_proto::pointer::NP_Value for bool&gt;::set_value (26 samples, 0.30%)</title><rect x="36.8028%" y="117" width="0.2984%" height="15" fill="rgb(209,103,24)"/><text x="37.0528%" y="127.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_borrow (74 samples, 0.85%)</title><rect x="38.0537%" y="101" width="0.8492%" height="15" fill="rgb(229,88,8)"/><text x="38.3037%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (23 samples, 0.26%)</title><rect x="38.6390%" y="85" width="0.2639%" height="15" fill="rgb(213,181,19)"/><text x="38.8890%" y="95.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::write_address (13 samples, 0.15%)</title><rect x="38.9029%" y="101" width="0.1492%" height="15" fill="rgb(254,191,54)"/><text x="39.1529%" y="111.50"></text></g><g><title>bench`no_proto::pointer::numbers::_&lt;impl no_proto::pointer::NP_Value for f32&gt;::set_value (172 samples, 1.97%)</title><rect x="37.1012%" y="117" width="1.9738%" height="15" fill="rgb(241,83,37)"/><text x="37.3512%" y="127.50">b..</text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_borrow (11 samples, 0.13%)</title><rect x="39.2013%" y="101" width="0.1262%" height="15" fill="rgb(233,36,39)"/><text x="39.4513%" y="111.50"></text></g><g><title>bench`no_proto::pointer::numbers::_&lt;impl no_proto::pointer::NP_Value for i32&gt;::set_value (24 samples, 0.28%)</title><rect x="39.0751%" y="117" width="0.2754%" height="15" fill="rgb(226,3,54)"/><text x="39.3251%" y="127.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_borrow (54 samples, 0.62%)</title><rect x="40.4407%" y="101" width="0.6197%" height="15" fill="rgb(245,192,40)"/><text x="40.6907%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (9 samples, 0.10%)</title><rect x="40.9571%" y="85" width="0.1033%" height="15" fill="rgb(238,167,29)"/><text x="41.2071%" y="95.50"></text></g><g><title>bench`no_proto::pointer::numbers::_&lt;impl no_proto::pointer::NP_Value for u16&gt;::set_value (160 samples, 1.84%)</title><rect x="39.3505%" y="117" width="1.8361%" height="15" fill="rgb(232,182,51)"/><text x="39.6005%" y="127.50">b..</text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_borrow (61 samples, 0.70%)</title><rect x="41.9784%" y="101" width="0.7000%" height="15" fill="rgb(231,60,39)"/><text x="42.2284%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (23 samples, 0.26%)</title><rect x="42.4145%" y="85" width="0.2639%" height="15" fill="rgb(208,69,12)"/><text x="42.6645%" y="95.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::write_address (9 samples, 0.10%)</title><rect x="42.6784%" y="101" width="0.1033%" height="15" fill="rgb(235,93,37)"/><text x="42.9284%" y="111.50"></text></g><g><title>bench`no_proto::pointer::numbers::_&lt;impl no_proto::pointer::NP_Value for u32&gt;::set_value (143 samples, 1.64%)</title><rect x="41.1866%" y="117" width="1.6410%" height="15" fill="rgb(213,116,39)"/><text x="41.4366%" y="127.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_borrow (32 samples, 0.37%)</title><rect x="43.2981%" y="101" width="0.3672%" height="15" fill="rgb(222,207,29)"/><text x="43.5481%" y="111.50"></text></g><g><title>bench`no_proto::pointer::numbers::_&lt;impl no_proto::pointer::NP_Value for u64&gt;::set_value (81 samples, 0.93%)</title><rect x="42.8276%" y="117" width="0.9295%" height="15" fill="rgb(206,96,30)"/><text x="43.0776%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (51 samples, 0.59%)</title><rect x="46.8097%" y="69" width="0.5853%" height="15" fill="rgb(218,138,4)"/><text x="47.0597%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (46 samples, 0.53%)</title><rect x="46.8671%" y="53" width="0.5279%" height="15" fill="rgb(250,191,14)"/><text x="47.1171%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free (84 samples, 0.96%)</title><rect x="46.4769%" y="85" width="0.9640%" height="15" fill="rgb(239,60,40)"/><text x="46.7269%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (103 samples, 1.18%)</title><rect x="47.4409%" y="85" width="1.1820%" height="15" fill="rgb(206,27,48)"/><text x="47.6909%" y="95.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::malloc (230 samples, 2.64%)</title><rect x="46.1671%" y="101" width="2.6394%" height="15" fill="rgb(225,35,8)"/><text x="46.4171%" y="111.50">be..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (14 samples, 0.16%)</title><rect x="48.6459%" y="85" width="0.1607%" height="15" fill="rgb(250,213,24)"/><text x="48.8959%" y="95.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12 samples, 0.14%)</title><rect x="49.1164%" y="85" width="0.1377%" height="15" fill="rgb(247,123,22)"/><text x="49.3664%" y="95.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_borrow (58 samples, 0.67%)</title><rect x="48.8065%" y="101" width="0.6656%" height="15" fill="rgb(231,138,38)"/><text x="49.0565%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (19 samples, 0.22%)</title><rect x="49.2541%" y="85" width="0.2180%" height="15" fill="rgb(231,145,46)"/><text x="49.5041%" y="95.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::write_address (11 samples, 0.13%)</title><rect x="49.4721%" y="101" width="0.1262%" height="15" fill="rgb(251,118,11)"/><text x="49.7221%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (221 samples, 2.54%)</title><rect x="49.8164%" y="85" width="2.5361%" height="15" fill="rgb(217,147,25)"/><text x="50.0664%" y="95.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (207 samples, 2.38%)</title><rect x="49.9770%" y="69" width="2.3755%" height="15" fill="rgb(247,81,37)"/><text x="50.2270%" y="79.50">li..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (243 samples, 2.79%)</title><rect x="49.5983%" y="101" width="2.7886%" height="15" fill="rgb(209,12,38)"/><text x="49.8483%" y="111.50">li..</text></g><g><title>bench`no_proto::pointer::string::_&lt;impl no_proto::pointer::NP_Value for &amp;str&gt;::set_value (784 samples, 9.00%)</title><rect x="43.7572%" y="117" width="8.9970%" height="15" fill="rgb(227,1,9)"/><text x="44.0072%" y="127.50">bench`no_prot..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (10 samples, 0.11%)</title><rect x="52.6394%" y="101" width="0.1148%" height="15" fill="rgb(248,47,43)"/><text x="52.8894%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (117 samples, 1.34%)</title><rect x="52.7886%" y="117" width="1.3427%" height="15" fill="rgb(221,10,30)"/><text x="53.0386%" y="127.50"></text></g><g><title>bench`no_proto::buffer::NP_Buffer::fast_insert (4,106 samples, 47.12%)</title><rect x="7.0576%" y="133" width="47.1196%" height="15" fill="rgb(210,229,1)"/><text x="7.3076%" y="143.50">bench`no_proto::buffer::NP_Buffer::fast_insert</text></g><g><title>bench`&lt;no_proto::collection::table::NP_Table as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.25%)</title><rect x="57.8150%" y="117" width="0.2525%" height="15" fill="rgb(222,148,37)"/><text x="58.0650%" y="127.50"></text></g><g><title>bench`no_proto::collection::table::pop_cols (40 samples, 0.46%)</title><rect x="83.6126%" y="85" width="0.4590%" height="15" fill="rgb(234,67,33)"/><text x="83.8626%" y="95.50"></text></g><g><title>bench`no_proto::collection::table::pop_cols (27 samples, 0.31%)</title><rect x="83.7618%" y="69" width="0.3098%" height="15" fill="rgb(247,98,35)"/><text x="84.0118%" y="79.50"></text></g><g><title>bench`no_proto::collection::table::pop_cols (11 samples, 0.13%)</title><rect x="83.9454%" y="53" width="0.1262%" height="15" fill="rgb(247,138,52)"/><text x="84.1954%" y="63.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::read_address (34 samples, 0.39%)</title><rect x="84.0716%" y="85" width="0.3902%" height="15" fill="rgb(213,79,30)"/><text x="84.3216%" y="95.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::read_address_offset (13 samples, 0.15%)</title><rect x="84.4618%" y="85" width="0.1492%" height="15" fill="rgb(246,177,23)"/><text x="84.7118%" y="95.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::read_address (45 samples, 0.52%)</title><rect x="87.0783%" y="69" width="0.5164%" height="15" fill="rgb(230,62,27)"/><text x="87.3283%" y="79.50"></text></g><g><title>bench`no_proto::pointer::NP_Cursor::new (290 samples, 3.33%)</title><rect x="84.6110%" y="85" width="3.3280%" height="15" fill="rgb(216,154,8)"/><text x="84.8610%" y="95.50">ben..</text></g><g><title>bench`no_proto::memory::NP_Memory::read_address_offset (30 samples, 0.34%)</title><rect x="87.5947%" y="69" width="0.3443%" height="15" fill="rgb(244,35,45)"/><text x="87.8447%" y="79.50"></text></g><g><title>bench`&lt;no_proto::collection::table::NP_Table as core::iter::traits::iterator::Iterator&gt;::next (1,545 samples, 17.73%)</title><rect x="72.2056%" y="101" width="17.7301%" height="15" fill="rgb(251,115,12)"/><text x="72.4556%" y="111.50">bench`&lt;no_proto::collection:..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (174 samples, 2.00%)</title><rect x="87.9389%" y="85" width="1.9968%" height="15" fill="rgb(240,54,50)"/><text x="88.1889%" y="95.50">l..</text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_borrow (10 samples, 0.11%)</title><rect x="90.0620%" y="101" width="0.1148%" height="15" fill="rgb(233,84,52)"/><text x="90.3120%" y="111.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_cursor (85 samples, 0.98%)</title><rect x="90.1767%" y="101" width="0.9754%" height="15" fill="rgb(207,117,47)"/><text x="90.4267%" y="111.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::read_address (53 samples, 0.61%)</title><rect x="91.1522%" y="101" width="0.6082%" height="15" fill="rgb(249,43,39)"/><text x="91.4022%" y="111.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::write_address (35 samples, 0.40%)</title><rect x="91.7833%" y="101" width="0.4017%" height="15" fill="rgb(209,38,44)"/><text x="92.0333%" y="111.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::read_address (27 samples, 0.31%)</title><rect x="93.4818%" y="85" width="0.3098%" height="15" fill="rgb(236,212,23)"/><text x="93.7318%" y="95.50"></text></g><g><title>bench`no_proto::pointer::NP_Cursor::new (146 samples, 1.68%)</title><rect x="92.1850%" y="101" width="1.6755%" height="15" fill="rgb(242,79,21)"/><text x="92.4350%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (26 samples, 0.30%)</title><rect x="93.8605%" y="101" width="0.2984%" height="15" fill="rgb(211,96,35)"/><text x="94.1105%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (74 samples, 0.85%)</title><rect x="94.1588%" y="101" width="0.8492%" height="15" fill="rgb(253,215,40)"/><text x="94.4088%" y="111.50"></text></g><g><title>bench`no_proto::buffer::NP_Buffer::select (3,246 samples, 37.25%)</title><rect x="58.1249%" y="117" width="37.2504%" height="15" fill="rgb(211,81,21)"/><text x="58.3749%" y="127.50">bench`no_proto::buffer::NP_Buffer::select</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (32 samples, 0.37%)</title><rect x="95.0080%" y="101" width="0.3672%" height="15" fill="rgb(208,190,38)"/><text x="95.2580%" y="111.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::read_address (10 samples, 0.11%)</title><rect x="95.4097%" y="117" width="0.1148%" height="15" fill="rgb(235,213,38)"/><text x="95.6597%" y="127.50"></text></g><g><title>bench`no_proto::buffer::NP_Buffer::move_cursor (3,628 samples, 41.63%)</title><rect x="54.1772%" y="133" width="41.6342%" height="15" fill="rgb(237,122,38)"/><text x="54.4272%" y="143.50">bench`no_proto::buffer::NP_Buffer::move_cursor</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (12 samples, 0.14%)</title><rect x="95.6736%" y="117" width="0.1377%" height="15" fill="rgb(244,218,35)"/><text x="95.9236%" y="127.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::addr_size_bytes (10 samples, 0.11%)</title><rect x="95.8458%" y="133" width="0.1148%" height="15" fill="rgb(240,68,47)"/><text x="96.0958%" y="143.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::read_bytes (9 samples, 0.10%)</title><rect x="96.1097%" y="133" width="0.1033%" height="15" fill="rgb(210,16,53)"/><text x="96.3597%" y="143.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::write_address (19 samples, 0.22%)</title><rect x="96.2130%" y="133" width="0.2180%" height="15" fill="rgb(235,124,12)"/><text x="96.4630%" y="143.50"></text></g><g><title>bench`no_proto::pointer::NP_Cursor::new (17 samples, 0.20%)</title><rect x="96.4310%" y="133" width="0.1951%" height="15" fill="rgb(224,169,11)"/><text x="96.6810%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_size (11 samples, 0.13%)</title><rect x="97.0048%" y="117" width="0.1262%" height="15" fill="rgb(250,166,2)"/><text x="97.2548%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (75 samples, 0.86%)</title><rect x="96.7868%" y="133" width="0.8607%" height="15" fill="rgb(242,216,29)"/><text x="97.0368%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (45 samples, 0.52%)</title><rect x="97.1311%" y="117" width="0.5164%" height="15" fill="rgb(230,116,27)"/><text x="97.3811%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (40 samples, 0.46%)</title><rect x="97.1884%" y="101" width="0.4590%" height="15" fill="rgb(228,99,48)"/><text x="97.4384%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.11%)</title><rect x="97.6475%" y="133" width="0.1148%" height="15" fill="rgb(253,11,6)"/><text x="97.8975%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (48 samples, 0.55%)</title><rect x="97.7622%" y="133" width="0.5508%" height="15" fill="rgb(247,143,39)"/><text x="98.0122%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (30 samples, 0.34%)</title><rect x="98.6114%" y="101" width="0.3443%" height="15" fill="rgb(236,97,10)"/><text x="98.8614%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (19 samples, 0.22%)</title><rect x="98.7377%" y="85" width="0.2180%" height="15" fill="rgb(233,208,19)"/><text x="98.9877%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (14 samples, 0.16%)</title><rect x="98.7950%" y="69" width="0.1607%" height="15" fill="rgb(216,164,2)"/><text x="99.0450%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (43 samples, 0.49%)</title><rect x="98.4737%" y="117" width="0.4935%" height="15" fill="rgb(220,129,5)"/><text x="98.7237%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (23 samples, 0.26%)</title><rect x="98.9672%" y="117" width="0.2639%" height="15" fill="rgb(242,17,10)"/><text x="99.2172%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (18 samples, 0.21%)</title><rect x="99.0246%" y="101" width="0.2066%" height="15" fill="rgb(242,107,0)"/><text x="99.2746%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (82 samples, 0.94%)</title><rect x="98.3245%" y="133" width="0.9410%" height="15" fill="rgb(251,28,31)"/><text x="98.5745%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (18 samples, 0.21%)</title><rect x="99.3000%" y="133" width="0.2066%" height="15" fill="rgb(233,223,10)"/><text x="99.5500%" y="143.50"></text></g><g><title>bench`bench::main (8,668 samples, 99.47%)</title><rect x="0.1377%" y="149" width="99.4721%" height="15" fill="rgb(215,21,27)"/><text x="0.3877%" y="159.50">bench`bench::main</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (9 samples, 0.10%)</title><rect x="99.5065%" y="133" width="0.1033%" height="15" fill="rgb(232,23,21)"/><text x="99.7565%" y="143.50"></text></g><g><title>bench`no_proto::buffer::NP_Buffer::fast_insert (13 samples, 0.15%)</title><rect x="99.7016%" y="149" width="0.1492%" height="15" fill="rgb(244,5,23)"/><text x="99.9516%" y="159.50"></text></g><g><title>all (8,714 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="271.50"></text></g><g><title>bench`0x1 (8,714 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="255.50">bench`0x1</text></g><g><title>libdyld.dylib`start (8,713 samples, 99.99%)</title><rect x="0.0115%" y="229" width="99.9885%" height="15" fill="rgb(212,68,19)"/><text x="0.2615%" y="239.50">libdyld.dylib`start</text></g><g><title>bench`main (8,713 samples, 99.99%)</title><rect x="0.0115%" y="213" width="99.9885%" height="15" fill="rgb(240,187,13)"/><text x="0.2615%" y="223.50">bench`main</text></g><g><title>bench`std::rt::lang_start_internal (8,713 samples, 99.99%)</title><rect x="0.0115%" y="197" width="99.9885%" height="15" fill="rgb(223,113,26)"/><text x="0.2615%" y="207.50">bench`std::rt::lang_start_internal</text></g><g><title>bench`std::rt::lang_start::_{{closure}} (8,713 samples, 99.99%)</title><rect x="0.0115%" y="181" width="99.9885%" height="15" fill="rgb(206,192,2)"/><text x="0.2615%" y="191.50">bench`std::rt::lang_start::_{{closure}}</text></g><g><title>bench`std::sys_common::backtrace::__rust_begin_short_backtrace (8,713 samples, 99.99%)</title><rect x="0.0115%" y="165" width="99.9885%" height="15" fill="rgb(241,108,4)"/><text x="0.2615%" y="175.50">bench`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>