<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>bench`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (18 samples, 0.12%)</title><rect x="2.7265%" y="149" width="0.1230%" height="15" fill="rgb(227,0,7)"/><text x="2.9765%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (79 samples, 0.54%)</title><rect x="3.1844%" y="85" width="0.5398%" height="15" fill="rgb(217,0,24)"/><text x="3.4344%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (73 samples, 0.50%)</title><rect x="3.2254%" y="69" width="0.4988%" height="15" fill="rgb(221,193,54)"/><text x="3.4754%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (98 samples, 0.67%)</title><rect x="3.0614%" y="101" width="0.6697%" height="15" fill="rgb(248,212,6)"/><text x="3.3114%" y="111.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (111 samples, 0.76%)</title><rect x="2.9862%" y="117" width="0.7585%" height="15" fill="rgb(208,68,35)"/><text x="3.2362%" y="127.50"></text></g><g><title>bench`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (125 samples, 0.85%)</title><rect x="2.9247%" y="133" width="0.8542%" height="15" fill="rgb(232,128,0)"/><text x="3.1747%" y="143.50"></text></g><g><title>bench`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (147 samples, 1.00%)</title><rect x="2.8974%" y="149" width="1.0045%" height="15" fill="rgb(207,160,47)"/><text x="3.1474%" y="159.50"></text></g><g><title>bench`core::fmt::write (189 samples, 1.29%)</title><rect x="2.6172%" y="165" width="1.2915%" height="15" fill="rgb(228,23,34)"/><text x="2.8672%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (37 samples, 0.25%)</title><rect x="4.2162%" y="101" width="0.2528%" height="15" fill="rgb(218,30,26)"/><text x="4.4662%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (84 samples, 0.57%)</title><rect x="4.1410%" y="133" width="0.5740%" height="15" fill="rgb(220,122,19)"/><text x="4.3910%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (77 samples, 0.53%)</title><rect x="4.1889%" y="117" width="0.5262%" height="15" fill="rgb(250,228,42)"/><text x="4.4389%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (36 samples, 0.25%)</title><rect x="4.4690%" y="101" width="0.2460%" height="15" fill="rgb(240,193,28)"/><text x="4.7190%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 0.10%)</title><rect x="4.8107%" y="133" width="0.1025%" height="15" fill="rgb(216,20,37)"/><text x="5.0607%" y="143.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::new (132 samples, 0.90%)</title><rect x="4.0385%" y="149" width="0.9020%" height="15" fill="rgb(206,188,39)"/><text x="4.2885%" y="159.50"></text></g><g><title>bench`no_proto::NP_Factory::empty_buffer (161 samples, 1.10%)</title><rect x="3.9087%" y="165" width="1.1002%" height="15" fill="rgb(217,207,13)"/><text x="4.1587%" y="175.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_borrow (85 samples, 0.58%)</title><rect x="28.8370%" y="117" width="0.5808%" height="15" fill="rgb(231,73,38)"/><text x="29.0870%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (34 samples, 0.23%)</title><rect x="29.1855%" y="101" width="0.2323%" height="15" fill="rgb(225,20,46)"/><text x="29.4355%" y="111.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::read_address (68 samples, 0.46%)</title><rect x="29.4178%" y="117" width="0.4647%" height="15" fill="rgb(210,31,41)"/><text x="29.6678%" y="127.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::write_address (16 samples, 0.11%)</title><rect x="29.8825%" y="117" width="0.1093%" height="15" fill="rgb(221,200,47)"/><text x="30.1325%" y="127.50"></text></g><g><title>bench`no_proto::pointer::NP_Cursor::new (198 samples, 1.35%)</title><rect x="29.9918%" y="117" width="1.3530%" height="15" fill="rgb(226,26,5)"/><text x="30.2418%" y="127.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::read_address (39 samples, 0.27%)</title><rect x="31.0783%" y="101" width="0.2665%" height="15" fill="rgb(249,33,26)"/><text x="31.3283%" y="111.50"></text></g><g><title>bench`no_proto::collection::table::NP_Table::read_table (844 samples, 5.77%)</title><rect x="25.6116%" y="133" width="5.7674%" height="15" fill="rgb(235,183,28)"/><text x="25.8616%" y="143.50">bench`n..</text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_cursor (225 samples, 1.54%)</title><rect x="31.3926%" y="133" width="1.5375%" height="15" fill="rgb(221,5,38)"/><text x="31.6426%" y="143.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (26 samples, 0.18%)</title><rect x="32.7525%" y="117" width="0.1777%" height="15" fill="rgb(247,18,42)"/><text x="33.0025%" y="127.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::write_address (107 samples, 0.73%)</title><rect x="32.9780%" y="133" width="0.7312%" height="15" fill="rgb(241,131,45)"/><text x="33.2280%" y="143.50"></text></g><g><title>bench`no_proto::pointer::NP_Cursor::new (171 samples, 1.17%)</title><rect x="33.7092%" y="133" width="1.1685%" height="15" fill="rgb(249,31,29)"/><text x="33.9592%" y="143.50"></text></g><g><title>bench`no_proto::collection::table::NP_Table::select_into (2,810 samples, 19.20%)</title><rect x="16.3113%" y="149" width="19.2019%" height="15" fill="rgb(225,111,53)"/><text x="16.5613%" y="159.50">bench`no_proto::collection::ta..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (93 samples, 0.64%)</title><rect x="34.8777%" y="133" width="0.6355%" height="15" fill="rgb(238,160,17)"/><text x="35.1277%" y="143.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::write_address (24 samples, 0.16%)</title><rect x="35.6567%" y="149" width="0.1640%" height="15" fill="rgb(214,148,48)"/><text x="35.9067%" y="159.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_borrow (43 samples, 0.29%)</title><rect x="36.5177%" y="133" width="0.2938%" height="15" fill="rgb(232,36,49)"/><text x="36.7677%" y="143.50"></text></g><g><title>bench`no_proto::pointer::numbers::_&lt;impl no_proto::pointer::NP_Value for f32&gt;::set_value (147 samples, 1.00%)</title><rect x="35.8890%" y="149" width="1.0045%" height="15" fill="rgb(209,103,24)"/><text x="36.1390%" y="159.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_borrow (30 samples, 0.21%)</title><rect x="37.7067%" y="133" width="0.2050%" height="15" fill="rgb(229,88,8)"/><text x="37.9567%" y="143.50"></text></g><g><title>bench`no_proto::pointer::numbers::_&lt;impl no_proto::pointer::NP_Value for u16&gt;::set_value (156 samples, 1.07%)</title><rect x="36.8935%" y="149" width="1.0660%" height="15" fill="rgb(213,181,19)"/><text x="37.1435%" y="159.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_borrow (47 samples, 0.32%)</title><rect x="38.5951%" y="133" width="0.3212%" height="15" fill="rgb(254,191,54)"/><text x="38.8451%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (18 samples, 0.12%)</title><rect x="38.7932%" y="117" width="0.1230%" height="15" fill="rgb(241,83,37)"/><text x="39.0432%" y="127.50"></text></g><g><title>bench`no_proto::pointer::numbers::_&lt;impl no_proto::pointer::NP_Value for u32&gt;::set_value (149 samples, 1.02%)</title><rect x="37.9595%" y="149" width="1.0182%" height="15" fill="rgb(233,36,39)"/><text x="38.2095%" y="159.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_borrow (26 samples, 0.18%)</title><rect x="39.2647%" y="133" width="0.1777%" height="15" fill="rgb(226,3,54)"/><text x="39.5147%" y="143.50"></text></g><g><title>bench`no_proto::pointer::numbers::_&lt;impl no_proto::pointer::NP_Value for u64&gt;::set_value (72 samples, 0.49%)</title><rect x="38.9777%" y="149" width="0.4920%" height="15" fill="rgb(245,192,40)"/><text x="39.2277%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (24 samples, 0.16%)</title><rect x="40.9184%" y="101" width="0.1640%" height="15" fill="rgb(238,167,29)"/><text x="41.1684%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (24 samples, 0.16%)</title><rect x="40.9184%" y="85" width="0.1640%" height="15" fill="rgb(232,182,51)"/><text x="41.1684%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (35 samples, 0.24%)</title><rect x="40.8501%" y="117" width="0.2392%" height="15" fill="rgb(231,60,39)"/><text x="41.1001%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (43 samples, 0.29%)</title><rect x="41.0892%" y="117" width="0.2938%" height="15" fill="rgb(208,69,12)"/><text x="41.3392%" y="127.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::malloc (92 samples, 0.63%)</title><rect x="40.7954%" y="133" width="0.6287%" height="15" fill="rgb(235,93,37)"/><text x="41.0454%" y="143.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_borrow (92 samples, 0.63%)</title><rect x="41.4241%" y="133" width="0.6287%" height="15" fill="rgb(213,116,39)"/><text x="41.6741%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (28 samples, 0.19%)</title><rect x="41.8614%" y="117" width="0.1913%" height="15" fill="rgb(222,207,29)"/><text x="42.1114%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (97 samples, 0.66%)</title><rect x="42.2168%" y="117" width="0.6628%" height="15" fill="rgb(206,96,30)"/><text x="42.4668%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (91 samples, 0.62%)</title><rect x="42.2578%" y="101" width="0.6218%" height="15" fill="rgb(218,138,4)"/><text x="42.5078%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (113 samples, 0.77%)</title><rect x="42.1143%" y="133" width="0.7722%" height="15" fill="rgb(250,191,14)"/><text x="42.3643%" y="143.50"></text></g><g><title>bench`no_proto::pointer::string::_&lt;impl no_proto::pointer::NP_Value for &amp;str&gt;::set_value (521 samples, 3.56%)</title><rect x="39.4697%" y="149" width="3.5602%" height="15" fill="rgb(239,60,40)"/><text x="39.7197%" y="159.50">benc..</text></g><g><title>bench`no_proto::buffer::NP_Buffer::fast_insert (5,590 samples, 38.20%)</title><rect x="5.0157%" y="165" width="38.1987%" height="15" fill="rgb(206,27,48)"/><text x="5.2657%" y="175.50">bench`no_proto::buffer::NP_Buffer::fast_insert</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (26 samples, 0.18%)</title><rect x="43.0368%" y="149" width="0.1777%" height="15" fill="rgb(225,35,8)"/><text x="43.2868%" y="159.50"></text></g><g><title>bench`&lt;no_proto::collection::table::NP_Table as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.13%)</title><rect x="48.1823%" y="133" width="0.1298%" height="15" fill="rgb(250,213,24)"/><text x="48.4323%" y="143.50"></text></g><g><title>bench`no_proto::buffer::NP_Buffer::select (54 samples, 0.37%)</title><rect x="50.0683%" y="117" width="0.3690%" height="15" fill="rgb(247,123,22)"/><text x="50.3183%" y="127.50"></text></g><g><title>bench`no_proto::collection::list::NP_List::read_list (75 samples, 0.51%)</title><rect x="51.0387%" y="101" width="0.5125%" height="15" fill="rgb(231,138,38)"/><text x="51.2887%" y="111.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_cursor (27 samples, 0.18%)</title><rect x="51.5512%" y="101" width="0.1845%" height="15" fill="rgb(231,145,46)"/><text x="51.8012%" y="111.50"></text></g><g><title>bench`no_proto::collection::list::NP_List::select_into (262 samples, 1.79%)</title><rect x="50.4373%" y="117" width="1.7904%" height="15" fill="rgb(251,118,11)"/><text x="50.6873%" y="127.50">b..</text></g><g><title>bench`no_proto::pointer::NP_Cursor::new (62 samples, 0.42%)</title><rect x="51.8040%" y="101" width="0.4237%" height="15" fill="rgb(217,147,25)"/><text x="52.0540%" y="111.50"></text></g><g><title>bench`no_proto::buffer::NP_Buffer::select (561 samples, 3.83%)</title><rect x="48.4352%" y="133" width="3.8335%" height="15" fill="rgb(247,81,37)"/><text x="48.6852%" y="143.50">benc..</text></g><g><title>bench`no_proto::memory::NP_Memory::read_address (16 samples, 0.11%)</title><rect x="70.9375%" y="85" width="0.1093%" height="15" fill="rgb(209,12,38)"/><text x="71.1875%" y="95.50"></text></g><g><title>bench`no_proto::collection::table::NP_Table::read_table (210 samples, 1.44%)</title><rect x="70.0219%" y="101" width="1.4350%" height="15" fill="rgb(227,1,9)"/><text x="70.2719%" y="111.50"></text></g><g><title>bench`no_proto::pointer::NP_Cursor::new (60 samples, 0.41%)</title><rect x="71.0469%" y="85" width="0.4100%" height="15" fill="rgb(248,47,43)"/><text x="71.2969%" y="95.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::read_address (21 samples, 0.14%)</title><rect x="71.3134%" y="69" width="0.1435%" height="15" fill="rgb(221,10,30)"/><text x="71.5634%" y="79.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::read_address (32 samples, 0.22%)</title><rect x="72.9671%" y="85" width="0.2187%" height="15" fill="rgb(210,229,1)"/><text x="73.2171%" y="95.50"></text></g><g><title>bench`no_proto::pointer::NP_Cursor::new (289 samples, 1.97%)</title><rect x="71.6277%" y="101" width="1.9749%" height="15" fill="rgb(222,148,37)"/><text x="71.8777%" y="111.50">b..</text></g><g><title>bench`no_proto::memory::NP_Memory::read_address_offset (61 samples, 0.42%)</title><rect x="73.1857%" y="85" width="0.4168%" height="15" fill="rgb(234,67,33)"/><text x="73.4357%" y="95.50"></text></g><g><title>bench`&lt;no_proto::collection::table::NP_Table as core::iter::traits::iterator::Iterator&gt;::next (1,841 samples, 12.58%)</title><rect x="62.5120%" y="117" width="12.5803%" height="15" fill="rgb(247,98,35)"/><text x="62.7620%" y="127.50">bench`&lt;no_proto::co..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (218 samples, 1.49%)</title><rect x="73.6026%" y="101" width="1.4897%" height="15" fill="rgb(247,138,52)"/><text x="73.8526%" y="111.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_cursor (64 samples, 0.44%)</title><rect x="76.0353%" y="101" width="0.4373%" height="15" fill="rgb(213,79,30)"/><text x="76.2853%" y="111.50"></text></g><g><title>bench`no_proto::collection::table::NP_Table::commit_virtual_cursor (208 samples, 1.42%)</title><rect x="75.1469%" y="117" width="1.4213%" height="15" fill="rgb(246,177,23)"/><text x="75.3969%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (317 samples, 2.17%)</title><rect x="79.1308%" y="69" width="2.1662%" height="15" fill="rgb(230,62,27)"/><text x="79.3808%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (300 samples, 2.05%)</title><rect x="79.2470%" y="53" width="2.0500%" height="15" fill="rgb(216,154,8)"/><text x="79.4970%" y="63.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (51 samples, 0.35%)</title><rect x="80.9485%" y="37" width="0.3485%" height="15" fill="rgb(244,35,45)"/><text x="81.1985%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (360 samples, 2.46%)</title><rect x="78.8438%" y="85" width="2.4600%" height="15" fill="rgb(251,115,12)"/><text x="79.0938%" y="95.50">li..</text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (402 samples, 2.75%)</title><rect x="78.6320%" y="101" width="2.7470%" height="15" fill="rgb(240,54,50)"/><text x="78.8820%" y="111.50">be..</text></g><g><title>bench`no_proto::memory::NP_Memory::read_address (36 samples, 0.25%)</title><rect x="81.3790%" y="101" width="0.2460%" height="15" fill="rgb(233,84,52)"/><text x="81.6290%" y="111.50"></text></g><g><title>bench`no_proto::collection::table::NP_Table::new (746 samples, 5.10%)</title><rect x="76.5683%" y="117" width="5.0977%" height="15" fill="rgb(207,117,47)"/><text x="76.8183%" y="127.50">bench`..</text></g><g><title>bench`no_proto::memory::NP_Memory::read_address (18 samples, 0.12%)</title><rect x="82.4723%" y="101" width="0.1230%" height="15" fill="rgb(249,43,39)"/><text x="82.7223%" y="111.50"></text></g><g><title>bench`no_proto::collection::table::NP_Table::read_table (188 samples, 1.28%)</title><rect x="81.6660%" y="117" width="1.2847%" height="15" fill="rgb(209,38,44)"/><text x="81.9160%" y="127.50"></text></g><g><title>bench`no_proto::pointer::NP_Cursor::new (52 samples, 0.36%)</title><rect x="82.5953%" y="101" width="0.3553%" height="15" fill="rgb(236,212,23)"/><text x="82.8453%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (91 samples, 0.62%)</title><rect x="83.4290%" y="101" width="0.6218%" height="15" fill="rgb(242,79,21)"/><text x="83.6790%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (86 samples, 0.59%)</title><rect x="83.4632%" y="85" width="0.5877%" height="15" fill="rgb(211,96,35)"/><text x="83.7132%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (140 samples, 0.96%)</title><rect x="83.1215%" y="117" width="0.9567%" height="15" fill="rgb(253,215,40)"/><text x="83.3715%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (132 samples, 0.90%)</title><rect x="84.0782%" y="117" width="0.9020%" height="15" fill="rgb(211,81,21)"/><text x="84.3282%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (78 samples, 0.53%)</title><rect x="85.0622%" y="117" width="0.5330%" height="15" fill="rgb(208,190,38)"/><text x="85.3122%" y="127.50"></text></g><g><title>bench`no_proto::collection::table::NP_Table::select_into (4,969 samples, 33.96%)</title><rect x="52.3370%" y="133" width="33.9552%" height="15" fill="rgb(235,213,38)"/><text x="52.5870%" y="143.50">bench`no_proto::collection::table::NP_Table::select_into</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (102 samples, 0.70%)</title><rect x="85.5952%" y="117" width="0.6970%" height="15" fill="rgb(237,122,38)"/><text x="85.8452%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (24 samples, 0.16%)</title><rect x="86.4630%" y="133" width="0.1640%" height="15" fill="rgb(244,218,35)"/><text x="86.7130%" y="143.50"></text></g><g><title>bench`no_proto::buffer::NP_Buffer::select (6,002 samples, 41.01%)</title><rect x="45.6403%" y="149" width="41.0141%" height="15" fill="rgb(240,68,47)"/><text x="45.8903%" y="159.50">bench`no_proto::buffer::NP_Buffer::select</text></g><g><title>bench`no_proto::buffer::NP_Buffer::move_cursor (6,363 samples, 43.48%)</title><rect x="43.2144%" y="165" width="43.4809%" height="15" fill="rgb(210,16,53)"/><text x="43.4644%" y="175.50">bench`no_proto::buffer::NP_Buffer::move_cursor</text></g><g><title>bench`no_proto::buffer::NP_Buffer::reset_cursor (67 samples, 0.46%)</title><rect x="86.6954%" y="165" width="0.4578%" height="15" fill="rgb(235,124,12)"/><text x="86.9454%" y="175.50"></text></g><g><title>bench`no_proto::pointer::NP_Cursor::new (29 samples, 0.20%)</title><rect x="86.9550%" y="149" width="0.1982%" height="15" fill="rgb(224,169,11)"/><text x="87.2050%" y="159.50"></text></g><g><title>bench`no_proto::buffer::NP_Buffer::select (34 samples, 0.23%)</title><rect x="89.1486%" y="133" width="0.2323%" height="15" fill="rgb(250,166,2)"/><text x="89.3986%" y="143.50"></text></g><g><title>bench`no_proto::collection::table::NP_Table::read_table (39 samples, 0.27%)</title><rect x="92.8454%" y="101" width="0.2665%" height="15" fill="rgb(242,216,29)"/><text x="93.0954%" y="111.50"></text></g><g><title>bench`no_proto::pointer::NP_Cursor::new (16 samples, 0.11%)</title><rect x="93.0026%" y="85" width="0.1093%" height="15" fill="rgb(230,116,27)"/><text x="93.2526%" y="95.50"></text></g><g><title>bench`no_proto::pointer::NP_Cursor::new (44 samples, 0.30%)</title><rect x="93.1529%" y="101" width="0.3007%" height="15" fill="rgb(228,99,48)"/><text x="93.4029%" y="111.50"></text></g><g><title>bench`&lt;no_proto::collection::table::NP_Table as core::iter::traits::iterator::Iterator&gt;::next (305 samples, 2.08%)</title><rect x="91.6632%" y="117" width="2.0842%" height="15" fill="rgb(253,11,6)"/><text x="91.9132%" y="127.50">b..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (43 samples, 0.29%)</title><rect x="93.4536%" y="101" width="0.2938%" height="15" fill="rgb(247,143,39)"/><text x="93.7036%" y="111.50"></text></g><g><title>bench`no_proto::memory::NP_Memory::malloc_cursor (15 samples, 0.10%)</title><rect x="93.9729%" y="101" width="0.1025%" height="15" fill="rgb(236,97,10)"/><text x="94.2229%" y="111.50"></text></g><g><title>bench`no_proto::collection::table::NP_Table::commit_virtual_cursor (49 samples, 0.33%)</title><rect x="93.7679%" y="117" width="0.3348%" height="15" fill="rgb(233,208,19)"/><text x="94.0179%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (79 samples, 0.54%)</title><rect x="94.5811%" y="85" width="0.5398%" height="15" fill="rgb(216,164,2)"/><text x="94.8311%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (68 samples, 0.46%)</title><rect x="94.6563%" y="69" width="0.4647%" height="15" fill="rgb(220,129,5)"/><text x="94.9063%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (64 samples, 0.44%)</title><rect x="94.6836%" y="53" width="0.4373%" height="15" fill="rgb(242,17,10)"/><text x="94.9336%" y="63.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (87 samples, 0.59%)</title><rect x="94.5469%" y="101" width="0.5945%" height="15" fill="rgb(242,107,0)"/><text x="94.7969%" y="111.50"></text></g><g><title>bench`no_proto::collection::table::NP_Table::new (158 samples, 1.08%)</title><rect x="94.1028%" y="117" width="1.0797%" height="15" fill="rgb(251,28,31)"/><text x="94.3528%" y="127.50"></text></g><g><title>bench`no_proto::collection::table::NP_Table::read_table (93 samples, 0.64%)</title><rect x="95.1825%" y="117" width="0.6355%" height="15" fill="rgb(233,223,10)"/><text x="95.4325%" y="127.50"></text></g><g><title>bench`no_proto::pointer::NP_Cursor::new (18 samples, 0.12%)</title><rect x="95.6950%" y="101" width="0.1230%" height="15" fill="rgb(215,21,27)"/><text x="95.9450%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (17 samples, 0.12%)</title><rect x="96.0025%" y="101" width="0.1162%" height="15" fill="rgb(232,23,21)"/><text x="96.2525%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (17 samples, 0.12%)</title><rect x="96.0025%" y="85" width="0.1162%" height="15" fill="rgb(244,5,23)"/><text x="96.2525%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (28 samples, 0.19%)</title><rect x="95.9410%" y="117" width="0.1913%" height="15" fill="rgb(226,81,46)"/><text x="96.1910%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (37 samples, 0.25%)</title><rect x="96.1323%" y="117" width="0.2528%" height="15" fill="rgb(247,70,30)"/><text x="96.3823%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (30 samples, 0.21%)</title><rect x="96.3851%" y="117" width="0.2050%" height="15" fill="rgb(212,68,19)"/><text x="96.6351%" y="127.50"></text></g><g><title>bench`no_proto::collection::table::NP_Table::select_into (1,073 samples, 7.33%)</title><rect x="89.3877%" y="133" width="7.3322%" height="15" fill="rgb(240,187,13)"/><text x="89.6377%" y="143.50">bench`no_p..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (19 samples, 0.13%)</title><rect x="96.5901%" y="117" width="0.1298%" height="15" fill="rgb(223,113,26)"/><text x="96.8401%" y="127.50"></text></g><g><title>bench`no_proto::buffer::NP_Buffer::select (1,253 samples, 8.56%)</title><rect x="88.2397%" y="149" width="8.5623%" height="15" fill="rgb(206,192,2)"/><text x="88.4897%" y="159.50">bench`no_pro..</text></g><g><title>bench`no_proto::pointer::bool::_&lt;impl no_proto::pointer::NP_Value for bool&gt;::set_value (15 samples, 0.10%)</title><rect x="96.8225%" y="149" width="0.1025%" height="15" fill="rgb(241,108,4)"/><text x="97.0725%" y="159.50"></text></g><g><title>bench`no_proto::pointer::numbers::_&lt;impl no_proto::pointer::NP_Value for u8&gt;::set_value (32 samples, 0.22%)</title><rect x="96.9250%" y="149" width="0.2187%" height="15" fill="rgb(247,173,49)"/><text x="97.1750%" y="159.50"></text></g><g><title>bench`no_proto::buffer::NP_Buffer::set (1,496 samples, 10.22%)</title><rect x="87.1737%" y="165" width="10.2228%" height="15" fill="rgb(224,114,35)"/><text x="87.4237%" y="175.50">bench`no_proto:..</text></g><g><title>bench`no_proto::pointer::string::_&lt;impl no_proto::pointer::NP_Value for &amp;str&gt;::set_value (37 samples, 0.25%)</title><rect x="97.1436%" y="149" width="0.2528%" height="15" fill="rgb(245,159,27)"/><text x="97.3936%" y="159.50"></text></g><g><title>bench`no_proto::collection::table::NP_Table::select_into (16 samples, 0.11%)</title><rect x="97.3965%" y="165" width="0.1093%" height="15" fill="rgb(245,172,44)"/><text x="97.6465%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (54 samples, 0.37%)</title><rect x="97.6766%" y="165" width="0.3690%" height="15" fill="rgb(236,23,11)"/><text x="97.9266%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (27 samples, 0.18%)</title><rect x="97.8611%" y="149" width="0.1845%" height="15" fill="rgb(205,117,38)"/><text x="98.1111%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (20 samples, 0.14%)</title><rect x="97.9090%" y="133" width="0.1367%" height="15" fill="rgb(237,72,25)"/><text x="98.1590%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (19 samples, 0.13%)</title><rect x="98.0456%" y="165" width="0.1298%" height="15" fill="rgb(244,70,9)"/><text x="98.2956%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (20 samples, 0.14%)</title><rect x="98.9955%" y="133" width="0.1367%" height="15" fill="rgb(217,125,39)"/><text x="99.2455%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (151 samples, 1.03%)</title><rect x="98.1755%" y="165" width="1.0318%" height="15" fill="rgb(235,36,10)"/><text x="98.4255%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (96 samples, 0.66%)</title><rect x="98.5513%" y="149" width="0.6560%" height="15" fill="rgb(251,123,47)"/><text x="98.8013%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (28 samples, 0.19%)</title><rect x="99.4738%" y="117" width="0.1913%" height="15" fill="rgb(221,13,13)"/><text x="99.7238%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (25 samples, 0.17%)</title><rect x="99.4943%" y="101" width="0.1708%" height="15" fill="rgb(238,131,9)"/><text x="99.7443%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (55 samples, 0.38%)</title><rect x="99.3030%" y="149" width="0.3758%" height="15" fill="rgb(211,50,8)"/><text x="99.5530%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (39 samples, 0.27%)</title><rect x="99.4123%" y="133" width="0.2665%" height="15" fill="rgb(245,182,24)"/><text x="99.6623%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (21 samples, 0.14%)</title><rect x="99.6925%" y="149" width="0.1435%" height="15" fill="rgb(242,14,37)"/><text x="99.9425%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (19 samples, 0.13%)</title><rect x="99.7062%" y="133" width="0.1298%" height="15" fill="rgb(246,228,12)"/><text x="99.9562%" y="143.50"></text></g><g><title>bench`bench::main (14,609 samples, 99.83%)</title><rect x="0.0205%" y="181" width="99.8292%" height="15" fill="rgb(213,55,15)"/><text x="0.2705%" y="191.50">bench`bench::main</text></g><g><title>libsystem_malloc.dylib`realloc (93 samples, 0.64%)</title><rect x="99.2142%" y="165" width="0.6355%" height="15" fill="rgb(209,9,3)"/><text x="99.4642%" y="175.50"></text></g><g><title>bench`main (14,633 samples, 99.99%)</title><rect x="0.0000%" y="245" width="99.9932%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="255.50">bench`main</text></g><g><title>bench`std::rt::lang_start_internal (14,633 samples, 99.99%)</title><rect x="0.0000%" y="229" width="99.9932%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="239.50">bench`std::rt::lang_start_internal</text></g><g><title>bench`std::rt::lang_start::_{{closure}} (14,633 samples, 99.99%)</title><rect x="0.0000%" y="213" width="99.9932%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="223.50">bench`std::rt::lang_start::_{{closure}}</text></g><g><title>bench`std::sys_common::backtrace::__rust_begin_short_backtrace (14,633 samples, 99.99%)</title><rect x="0.0000%" y="197" width="99.9932%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="207.50">bench`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>all (14,634 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="303.50"></text></g><g><title>bench`0x1 (14,634 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="287.50">bench`0x1</text></g><g><title>libdyld.dylib`start (14,634 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="271.50">libdyld.dylib`start</text></g></svg></svg>